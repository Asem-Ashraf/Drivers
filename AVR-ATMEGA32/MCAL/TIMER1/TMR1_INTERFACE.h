#ifndef TMR1_INTERFACE_H
#define TMR1_INTERFACE_H
#include "../../LIB/STD_TYPE.h"
#include "../../LIB/ERR_TYPE.h"
#include "../../LIB/BIT_MATH.h"

#define TMR1_u8NormalMode                           0
#define TMR1_u8PhaseCorrectPWM_8_bit                1 
#define TMR1_u8PhaseCorrectPWM_9_bit                2              
#define TMR1_u8PhaseCorrectPWM_10_bit               3               
#define TMR1_u8CTC_OCR1A                            4
#define TMR1_u8FastPWM_8_bit                        5  
#define TMR1_u8FastPWM_9_bit                        6  
#define TMR1_u8FastPWM_10_bit                       7   
#define TMR1_u8PWMPhaseandFrequencyCorrect_ICR1     8                     
#define TMR1_u8PWMPhaseandFrequencyCorrect_OCR1A    9                      
#define TMR1_u8PWMPhaseCorrect_ICR1                 10         
#define TMR1_u8PWMPhaseCorrect_OCR1A                11          
#define TMR1_u8CTC_ICR1                             12
#define TMR1_u8FastPWM_ICR1                         14 
#define TMR1_u8FastPWM_OCR1A                        15  

#define TMR1_u8OC1xDisconnected  0
#define TMR1_u8OC1xToggle        1
#define TMR1_u8OC1xClear         2
#define TMR1_u8OC1xSet           3

#define TMR1_u8OC1xNonInverting  2
#define TMR1_u8OC1xInverting     3

#define TMR1_u8NoClk            0
#define TMR1_u8Clk              1
#define TMR1_u8Clk_8            2
#define TMR1_u8Clk_64           3
#define TMR1_u8Clk_256          4
#define TMR1_u8Clk_1024         5
#define TMR1_u8ExtFallingEdge   6
#define TMR1_u8ExtRisingEdge    7


/**
 * @brief  Initializes Timer1 with the specified configuration settings.
 *         This function initializes Timer1 with the specified clock source, 
 *         mode, output compare pin configuration, preload value, and Clear 
 *         Timer on Compare (CTC) mode settings.<<<<<<<<<<<<<<<<<<<<<<<<<<<<args
 * @param  Copy_u8clkSource The clock source to use for Timer1.
 * @values TMR1_u8NoClk         
 *         TMR1_u8Clk           
 *         TMR1_u8Clk_8         
 *         TMR1_u8Clk_64        
 *         TMR1_u8Clk_256       
 *         TMR1_u8Clk_1024      
 *         TMR1_u8ExtFallingEdge
 *         TMR1_u8ExtRisingEdge 
 *
 * @param  Copy_u8mode The mode to use for Timer1.
 * @values TMR1_u8NormalMode                           
 *         TMR1_u8PhaseCorrectPWM_8_bit                
 *         TMR1_u8PhaseCorrectPWM_9_bit                
 *         TMR1_u8PhaseCorrectPWM_10_bit               
 *         TMR1_u8CTC_OCR1A                            
 *         TMR1_u8FastPWM_8_bit                        
 *         TMR1_u8FastPWM_9_bit                        
 *         TMR1_u8FastPWM_10_bit                       
 *         TMR1_u8PWMPhaseandFrequencyCorrect_ICR1     
 *         TMR1_u8PWMPhaseandFrequencyCorrect_OCR1A    
 *         TMR1_u8PWMPhaseCorrect_ICR1                 
 *         TMR1_u8PWMPhaseCorrect_OCR1A                
 *         TMR1_u8CTC_ICR1                             
 *         TMR1_u8FastPWM_ICR1                         
 *         TMR1_u8FastPWM_OCR1A                        
 *
 * @param  Copy_u8OC1APinConfig The output compare pin configuration to use for 
 *         Timer1.
 * @values TMR1_u8OC1xDisconnected
 *         TMR1_u8OC1xToggle      
 *         TMR1_u8OC1xClear       
 *         TMR1_u8OC1xSet         
 *         TMR1_u8OC1xNonInverting
 *         TMR1_u8OC1xInverting   
 *
 * @param  Copy_u8OC1BPinConfig The output compare pin configuration to use for 
 *         Timer1.
 * @values TMR1_u8OC1xDisconnected
 *         TMR1_u8OC1xToggle      
 *         TMR1_u8OC1xClear       
 *         TMR1_u8OC1xSet         
 *         TMR1_u8OC1xNonInverting
 *         TMR1_u8OC1xInverting   
 *
 * @param  Copy_u16Preload The preload value to use for Timer1 (0-65,535).
 *
 * @param  Copy_u16ICValue The Output-Compare value mode setting to use for Timer1 (0-65,535).
 *
 * @param  Copy_u16OCAValue The Output-Compare value mode setting to use for Timer1 (0-65,535).
 *
 * @param  Copy_u16OCBValue The Output-Compare value mode setting to use for Timer1 (0-65,535).
 *
 * @return An error status code of type ES_t, indicating success or failure of 
 *         the initialization process.
 */
ES_t TMR1_enuInit(u8 Copy_u8clkSource,
                  u8 Copy_u8mode,
                  u8 Copy_u8OC1APinConfig,
                  u8 Copy_u8OC1BPinConfig,
                  u16 Copy_u16Preload,
                  u16 Copy_u16ICValue,
                  u16 Copy_u16OCAValue,
                  u16 Copy_u16OCBValue);


/**
 * @brief Sets the 16reload 16alue of Timer1.
 *        This function sets the preload value of Timer1, which determines the 
 *        initial value of the timer counter.
 *        The preload value is used to adjust the frequency and duty cycle of 
 *        the PWM waveform generated by Timer1.
 *
 * @param TMR1_u16Preload Preload value to set for Timer1 (0-65,535).
 *
 * @return None.
 */
void TMR1_SetPreload(u16 Copy_u16Preload);


/**
 * @brief Sets the output compare value of Timer1.
 *        This function sets the output compare value of Timer1, which controls 
 *        the behavior of the output waveform generated by Timer1.
 *        The output compare value determines when the output waveform changes 
 *        state, either from low to high or from high to low.
 *
 * @param TMR1_u16OCValue Output compare value to set for Timer1 (0-65,535).
 *
 * @return None.
 */
void TMR1_SetOutputCompareValue(u16 Copy_u16OCValue);


void TMR1_EnableOverflowInterrupt();
ES_t TMR1_enuSetOverflowCallback(void (*Copy_pfuncIsrOverflow)());
void TMR1_DisableOverflowInterrupt();


void TMR1_EnableCompareMatchAInterrupt();
ES_t TMR1_enuSetCompareMatchACallback(void (*Copy_pfuncIsrCTC)());
void TMR1_DisableCompareMatchAInterrupt();


void TMR1_EnableCompareMatchBInterrupt();
ES_t TMR1_enuSetCompareMatchBCallback(void (*Copy_pfuncIsrCTC)());
void TMR1_DisableCompareMatchBInterrupt();


void TMR1_EnableCaptureInterrupt();
ES_t TMR1_enuSetCaptureCallback(void (*Copy_pfuncIsrIC)());
void TMR1_DisableCaptureInterrupt();


void TMR1_Stop();



// FEATURES

/**
 * @brief  Waits for a specified number of milliseconds using busy-waiting and 
 *         Timer1 interrupts.
 *         This function uses the Timer1 hardware to generate interrupts at a 
 *         specified interval to count the delay time.
 *         The function waits for the specified delay time to elapse before 
 *         returning.
 *
 * @param  Copy_u32Timems Delay time in milliseconds to wait for.
 *
 * @return ES_t Returns ES_OK if the function was executed successfully, or an 
 *         error code if execution failed.
 */
ES_t TMR1_enuBusyWaitms(u32 Copy_u32Timems);

/**
 * @brief  Executes a function continuously with a specified delay between each 
 *         execution.
 *         This function uses the Timer1 hardware to generate interrupts at the 
 *         specified interval.
 *         The function is executed in the interrupt service routine (ISR).
 *
 * @param  Copy_u32Timems Delay in milliseconds between each execution of the 
 *         function.
 *
 * @param  Copy_pfuncIsr Pointer to the function to be executed.
 *
 * @return ES_t Returns ES_OK if the function was registered successfully, or an 
 *         error code if registration failed.
 *         Possible error codes are: ES_NULL_POINTER.
 */
ES_t TMR1_enuDelayedExecutionContiniuousms(u32 Copy_u32Timems,void (*Copy_pfuncIsr)());

/**
 * @brief  Sets the duty cycle of a PWM waveform generated by Timer1.
 *         This function uses Timer1 hardware to generate a PWM waveform with a 
 *         specified duty cycle and frequency.
 *
 * @param  Copy_u8Duty PWM duty cycle as a percentage (1-100).
 *
 * @param  Copy_uf32Frequency PWM Frequency (16.0-10,000.0).
 *
 * @return ES_t Returns ES_OK if the function was executed successfully, or an 
 *         error code if execution failed.
 *         Possible error codes are: ES_OUT_OF_RANGE.
 */
ES_t TMR1_enuSetDutyandFrequency(u8 Copy_u8Duty,f32 Copy_f32Frequency);

#endif
